import os
import re
from langchain_core.prompts import ChatPromptTemplate
from langchain_openai import ChatOpenAI
from langchain_core.output_parsers import JsonOutputParser
from langfuse import Langfuse
from langfuse.langchain import CallbackHandler
from summa.summarizer import summarize
from dotenv import load_dotenv

load_dotenv()

# === Langfuse tracking ===
langfuse_handler = CallbackHandler()

langfuse = Langfuse(
    public_key=os.getenv("LANGFUSE_PUBLIC_KEY"),
    secret_key=os.getenv("LANGFUSE_SECRET_KEY"),
    host=os.getenv("LANGFUSE_HOST"),
)


# === H√†m t√≥m t·∫Øt n·ªôi dung n·∫øu d√†i h∆°n 100 t·ª´ (kh√¥ng d√πng LLM) ===
def summarize_text_locally(text: str, word_limit: int = 50) -> str:
    summary = summarize(text, words=word_limit, language='english')
    if not summary:
        summary = '. '.join(text.split('. ')[:2])
    return summary

# === Chu·∫©n h√≥a n·ªôi dung ƒë·∫ßu v√†o: c·∫Øt 100 t·ª´ ho·∫∑c t√≥m t·∫Øt n·∫øu d√†i ===
def prepare_text(text: str) -> str:
    words = re.findall(r'\w+|\S', text)
    if len(words) > 100:
        print("üìå N·ªôi dung d√†i > 100 t·ª´, ƒëang t√≥m t·∫Øt b·∫±ng TextRank...")
        return summarize_text_locally(text)
    return ' '.join(words[:100])

# === LLM t·ª´ DeepInfra ===
llm = ChatOpenAI(
    model="accounts/fireworks/models/llama4-scout-instruct-basic",
    temperature=0.4,
    openai_api_key=os.getenv("OPENAI_API_KEY"),
    openai_api_base=os.getenv("OPENAI_API_BASE"),
)

# === Parser JSON chu·∫©n ===
parser = JsonOutputParser()

# === Prompt t·ªïng qu√°t theo ng√†nh (KH√îNG ch·ª©a ngu·ªìn) ===
prompt = ChatPromptTemplate.from_template(
    """
B·∫°n l√† m·ªôt chuy√™n gia ph√¢n t√≠ch d·ªØ li·ªáu m·∫°ng x√£ h·ªôi trong ng√†nh "{domain}".

Nhi·ªám v·ª• c·ªßa b·∫°n:
1. Ph√¢n t√≠ch n·ªôi dung d∆∞·ªõi ƒë√¢y v√† suy lu·∫≠n t·ªëi ƒëa 3 nh√£n th·ªÉ hi·ªán ch·ªß ƒë·ªÅ ch√≠nh (labels) b·∫±ng ti·∫øng Vi·ªát.
2. ƒê√°nh gi√° ƒë·ªô tin c·∫≠y t·ª´ 0 ƒë·∫øn 1 (confidence).

Tr·∫£ v·ªÅ ƒë√∫ng ƒë·ªãnh d·∫°ng JSON sau:
{{
  "labels": ["...", "..."],
  "confidence": ...
}}

N·ªôi dung: "{text}"
"""
)

# === G·ªôp th√†nh m·ªôt Agentic Chain chu·∫©n h√≥a ===
label_chain = (
    {
        "text": lambda x: prepare_text(x["text"]),
        "domain": lambda x: x["domain"],
    }
    | prompt
    | llm
    | parser
)

# === H√†m g√°n nh√£n ch√≠nh ===
def label_social_post(text: str, domain: str) -> dict:
    """
    G√°n nh√£n cho b√†i vi·∫øt social listening theo ng√†nh.

    Args:
        text (str): N·ªôi dung b√†i vi·∫øt.
        domain (str): Ng√†nh (banking, healthcare, ecommerce,...)

    Returns:
        dict: labels, confidence
    """
    return label_chain.invoke({
        "text": text,
        "domain": domain,
    }, config={"callbacks": [langfuse_handler]})